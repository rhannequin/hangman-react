{"version":3,"sources":["StatusBar.js","HiddenLetter.js","HiddenWord.js","Letter.js","Keyboard.js","App.js","serviceWorker.js","index.js"],"names":["StatusBar","chances","gameStatus","lauchNewGame","className","label","onClick","HiddenLetter","value","reveal","HiddenWord","lettersToGuess","selectedLetters","map","letter","index","key","includes","Letter","enabled","picked","pickedStatus","handleClick","useCallback","classes","classNames","disabled","LETTERS","selected","matchingValues","Keyboard","handleLetterClick","letterValue","randomWordLetters","faker","hacker","noun","toUpperCase","split","App","useState","status","appState","setAppState","wrongGuess","prevState","newSelectedLetters","newState","every","newChances","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9edafec0.chunk.js","sourcesContent":["import React from \"react\"\n\nconst STATUS_PLAYING = \"playing\"\nconst STATUS_SUCCESS = \"succeeded\"\nconst STATUS_FAIL = \"failed\"\n\nfunction label(chances) {\n  switch(chances) {\n    case 0:\n      return \"0 chance left\"\n    case 1:\n      return \"Only 1 chance remaining\"\n    default:\n      return `${chances} chances remaining`\n  }\n}\n\nconst StatusBar = ({ chances, gameStatus, lauchNewGame }) => (\n  <div className=\"ui segment keyboard\">\n    {\n      gameStatus === STATUS_PLAYING &&\n      <p>{label(chances)}</p>\n    }\n\n    {\n      gameStatus === STATUS_SUCCESS &&\n      <p className=\"ui green header\">Well done!</p>\n    }\n\n    {\n      gameStatus === STATUS_FAIL &&\n      <p className=\"ui red header\">Game over</p>\n    }\n\n    {\n      (gameStatus === STATUS_SUCCESS || gameStatus === STATUS_FAIL) &&\n      <p>\n        <button\n          onClick={lauchNewGame}\n          className=\"ui green button\"\n        >\n          Start new game\n        </button>\n      </p>\n    }\n  </div>\n)\n\nexport default StatusBar\n","import React from \"react\"\n\nimport \"./HiddenLetter.css\"\n\nconst DEFAULT_VALUE = \"_\"\n\nconst HiddenLetter = ({ value, reveal }) => (\n  <span className=\"hidden-letter\">{reveal ? value : DEFAULT_VALUE}</span>\n)\n\nexport default HiddenLetter\n","import React from \"react\"\n\nimport \"./HiddenWord.css\"\n\nimport HiddenLetter from \"./HiddenLetter\"\n\nconst HiddenWord = ({ reveal, lettersToGuess, selectedLetters }) => (\n  <div className=\"ui segment\">\n    {lettersToGuess.map((letter, index) => (\n      <HiddenLetter\n        key={index}\n        value={letter}\n        reveal={reveal || selectedLetters.includes(letter)}\n      />\n    ))}\n  </div>\n)\n\nexport default HiddenWord\n","import React, { useCallback } from \"react\"\nimport classNames from \"classnames\"\n\nimport \"./Letter.css\"\n\nconst SUCCESS_CLASS = \"positive\"\nconst FAIL_CLASS = \"negative\"\n\nconst Letter = ({ value, enabled, picked, pickedStatus, onClick }) => {\n  const handleClick = useCallback(() => onClick(value), [value, onClick])\n  const classes = classNames(\"ui\", \"button\", {\n    [SUCCESS_CLASS]: picked && pickedStatus,\n    [FAIL_CLASS]: picked && !pickedStatus,\n  })\n\n  return (\n    <span className=\"letter\">\n      <button\n        className={classes}\n        onClick={handleClick}\n        disabled={!enabled || picked}\n      >\n        {value}\n      </button>\n    </span>\n  )\n}\n\nexport default Letter\n","import React from \"react\"\n\nimport \"./Keyboard.css\"\n\nimport Letter from \"./Letter\"\n\nconst LETTERS = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n]\n\nfunction pickedStatus(value, selected, matchingValues) {\n  if (selected.includes(value)) {\n    return matchingValues.includes(value)\n  }\n}\n\nconst Keyboard = ({\n  enabled,\n  lettersToGuess,\n  selectedLetters,\n  handleLetterClick,\n}) => {\n  return (\n    <div className=\"ui segment keyboard\">\n      {LETTERS.map((letterValue) => (\n        <Letter\n          key={letterValue}\n          value={letterValue}\n          enabled={enabled}\n          picked={selectedLetters.includes(letterValue)}\n          pickedStatus={pickedStatus(\n            letterValue,\n            selectedLetters,\n            lettersToGuess\n          )}\n          onClick={handleLetterClick}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default Keyboard\n","import React, { useState } from \"react\"\nimport faker from \"faker\"\n\nimport \"./App.css\"\n\nimport StatusBar from \"./StatusBar\"\nimport HiddenWord from \"./HiddenWord\"\nimport Keyboard from \"./Keyboard\"\n\nconst INITIAL_CHANCES = 6\nconst STATUS_PLAYING = \"playing\"\nconst STATUS_SUCCEEDED = \"succeeded\"\nconst STATUS_FAILED = \"failed\"\n\nconst randomWordLetters = () => faker.hacker.noun().toUpperCase().split(\"\")\n\nconst App = () => {\n  const [appState, setAppState] = useState({\n    lettersToGuess: randomWordLetters(),\n    selectedLetters: [],\n    chances: INITIAL_CHANCES,\n    status: STATUS_PLAYING,\n  })\n\n  const lauchNewGame = () => {\n    setAppState({\n      lettersToGuess: randomWordLetters(),\n      selectedLetters: [],\n      chances: INITIAL_CHANCES,\n      status: STATUS_PLAYING,\n    })\n  }\n\n  const handleLetterClick = (letter) => {\n    setAppState((prevState) => {\n      const newSelectedLetters = [...prevState.selectedLetters, letter]\n      const newState = { ...prevState, selectedLetters: newSelectedLetters }\n\n      if (\n        appState.lettersToGuess.every((letter) =>\n          newSelectedLetters.includes(letter)\n        )\n      ) {\n        newState.status = STATUS_SUCCEEDED\n      }\n\n      if (wrongGuess(letter)) {\n        const newChances = prevState.chances - 1\n        newState.chances = newChances\n\n        if (newChances === 0) {\n          newState.status = STATUS_FAILED\n        }\n      }\n\n      return newState\n    })\n  }\n\n  const wrongGuess = (letter) => {\n    return !appState.lettersToGuess.includes(letter)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"ui container\">\n        <h1 className=\"ui header\">Hangman React</h1>\n        <StatusBar\n          gameStatus={appState.status}\n          chances={appState.chances}\n          lauchNewGame={lauchNewGame}\n        />\n        <HiddenWord\n          reveal={appState.status !== STATUS_PLAYING}\n          lettersToGuess={appState.lettersToGuess}\n          selectedLetters={appState.selectedLetters}\n        />\n        <Keyboard\n          enabled={appState.status === STATUS_PLAYING}\n          lettersToGuess={appState.lettersToGuess}\n          selectedLetters={appState.selectedLetters}\n          handleLetterClick={handleLetterClick}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}