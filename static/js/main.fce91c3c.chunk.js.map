{"version":3,"sources":["HiddenLetter.js","HiddenWord.js","Letter.js","Keyboard.js","App.js","serviceWorker.js","index.js"],"names":["HiddenLetter","value","status","className","HiddenWord","letter","this","props","selectedLetters","includes","split","map","key","statusForLetter","Component","Letter","alreadySelected","onClick","LETTERS","Keyboard","handleLetterClick","letterValue","App","state","setState","prevState","_props","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUAeeA,G,kBARM,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC7B,OACE,0BAAMC,UAAU,iBALG,YAMhBD,EAA4BD,EALb,OCyBPG,E,8KAnBGC,GACd,OAAOC,KAAKC,MAAMC,gBAAgBC,SAASJ,GAL1B,QACE,Y,+BAOX,IAAD,OACP,OACE,yBAAKF,UAAU,cAXD,QAYCO,MAAM,IAAIC,KAAI,SAAAN,GAAM,OAC/B,kBAAC,EAAD,CACEO,IAAKP,EACLJ,MAAOI,EACPH,OAAQ,EAAKW,gBAAgBR,a,GAZhBS,aCOVC,G,YAXA,SAAC,GAAD,IAAGd,EAAH,EAAGA,MAAOe,EAAV,EAAUA,gBAAiBC,EAA3B,EAA2BA,QAA3B,OACb,0BAAMd,UAAU,UACd,4BACEA,UAAS,oBAAea,EALP,WAK0C,IAC3DC,QAAS,kBAAMA,EAAQhB,KAEtBA,MCNDiB,EAAU,CACd,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC5D,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAkB/CC,EAfE,SAAC,GAA4C,IAA1CX,EAAyC,EAAzCA,gBAAiBY,EAAwB,EAAxBA,kBACnC,OACE,yBAAKjB,UAAU,uBACZe,EAAQP,KAAI,SAACU,GAAD,OACX,kBAAC,EAAD,CACET,IAAKS,EACLpB,MAAOoB,EACPL,gBAAiBR,EAAgBC,SAASY,GAC1CJ,QAASG,SCqBJE,E,4MAjCbC,MAAQ,CACNf,gBAAiB,I,EAInBY,kBAAoB,SAACf,GACf,EAAKkB,MAAMf,gBAAgBC,SAASJ,IACtC,EAAKmB,UACH,SAACC,EAAWC,GAAZ,MACE,CAAElB,gBAAgB,GAAD,mBAAMiB,EAAUjB,iBAAhB,CAAiCH,S,uDAMhD,IACAG,EAAoBF,KAAKiB,MAAzBf,gBAER,OACE,yBAAKL,UAAU,OACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,aAAd,iBACA,kBAAC,EAAD,CAAYK,gBAAiBA,IAC7B,kBAAC,EAAD,CACEA,gBAAiBA,EACjBY,kBAAmBd,KAAKc,0B,GA1BlBN,aCMEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fce91c3c.chunk.js","sourcesContent":["import React from \"react\"\n\nimport \"./HiddenLetter.css\"\n\nconst DEFAULT_STATUS = \"unknown\"\nconst DEFAULT_VALUE = \"_\"\n\nconst HiddenLetter = ({ value, status }) => {\n  return (\n    <span className=\"hidden-letter\">\n      {status !== DEFAULT_STATUS ? value : DEFAULT_VALUE}\n    </span>\n  )\n}\n\nexport default HiddenLetter\n","import React, { Component } from \"react\"\n\nimport \"./HiddenWord.css\"\n\nimport HiddenLetter from \"./HiddenLetter\"\n\nconst wordToGuess = \"REACT\"\nconst STATUS_FOUND = \"found\"\nconst STATUS_UNKNOWN = \"unknown\"\n\nclass HiddenWord extends Component {\n  statusForLetter(letter) {\n    return this.props.selectedLetters.includes(letter) ? STATUS_FOUND : STATUS_UNKNOWN\n  }\n\n  render() {\n    return (\n      <div className=\"ui segment\">\n        {wordToGuess.split(\"\").map(letter => (\n          <HiddenLetter\n            key={letter}\n            value={letter}\n            status={this.statusForLetter(letter)}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n\nexport default HiddenWord\n","import React from \"react\"\n\nimport \"./Letter.css\"\n\nconst DISABLED_CLASS = \"disabled\"\n\nconst Letter = ({ value, alreadySelected, onClick }) => (\n  <span className=\"letter\">\n    <button\n      className={`ui button ${alreadySelected ? DISABLED_CLASS : \"\"}`}\n      onClick={() => onClick(value)}\n    >\n      {value}\n    </button>\n  </span>\n)\n\nexport default Letter\n","import React from \"react\"\n\nimport \"./Keyboard.css\"\n\nimport Letter from \"./Letter\"\n\nconst LETTERS = [\n  \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\",\n  \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n]\n\nconst Keyboard = ({ selectedLetters, handleLetterClick }) => {\n  return (\n    <div className=\"ui segment keyboard\">\n      {LETTERS.map((letterValue) => (\n        <Letter\n          key={letterValue}\n          value={letterValue}\n          alreadySelected={selectedLetters.includes(letterValue)}\n          onClick={handleLetterClick}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default Keyboard\n","import React, { Component } from \"react\"\nimport \"./App.css\"\n\nimport HiddenWord from \"./HiddenWord\"\nimport Keyboard from \"./Keyboard\"\n\nclass App extends Component {\n  state = {\n    selectedLetters: [],\n  }\n\n  // Arrow fx for binding\n  handleLetterClick = (letter) => {\n    if(!this.state.selectedLetters.includes(letter)) {\n      this.setState(\n        (prevState, _props) => (\n          { selectedLetters: [...prevState.selectedLetters, letter] }\n        )\n      )\n    }\n  }\n\n  render() {\n    const { selectedLetters } = this.state\n\n    return (\n      <div className=\"App\">\n        <div className=\"ui container\">\n          <h1 className=\"ui header\">Hangman React</h1>\n          <HiddenWord selectedLetters={selectedLetters} />\n          <Keyboard\n            selectedLetters={selectedLetters}\n            handleLetterClick={this.handleLetterClick}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}