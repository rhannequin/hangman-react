{"version":3,"sources":["StatusBar.js","HiddenLetter.js","HiddenWord.js","Letter.js","Keyboard.js","App.js","serviceWorker.js","index.js"],"names":["StatusBar","chances","gameStatus","lauchNewGame","className","label","onClick","HiddenLetter","value","reveal","HiddenWord","lettersToGuess","selectedLetters","map","letter","index","key","includes","pickedClass","enabled","picked","status","Letter","pickedStatus","LETTERS","selected","matchingValues","Keyboard","handleLetterClick","letterValue","randomWord","faker","hacker","noun","toUpperCase","App","state","split","setState","prevState","_props","newSelectedLetters","newState","every","wrongGuess","newChances","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.82e44631.chunk.js","sourcesContent":["import React from \"react\"\n\nconst STATUS_PLAYING = \"playing\"\nconst STATUS_SUCCESS = \"succeeded\"\nconst STATUS_FAIL = \"failed\"\n\nfunction label(chances) {\n  switch(chances) {\n    case 0:\n      return \"0 chance left\"\n    case 1:\n      return \"Only 1 chance remaining\"\n    default:\n      return `${chances} chances remaining`\n  }\n}\n\nconst StatusBar = ({ chances, gameStatus, lauchNewGame }) => (\n  <div className=\"ui segment keyboard\">\n    {\n      gameStatus === STATUS_PLAYING &&\n      <p>{label(chances)}</p>\n    }\n\n    {\n      gameStatus === STATUS_SUCCESS &&\n      <p className=\"ui green header\">Well done!</p>\n    }\n\n    {\n      gameStatus === STATUS_FAIL &&\n      <p className=\"ui red header\">Game over</p>\n    }\n\n    {\n      (gameStatus === STATUS_SUCCESS || gameStatus === STATUS_FAIL) &&\n      <p>\n        <button\n          onClick={lauchNewGame}\n          className=\"ui green button\"\n        >\n          Start new game\n        </button>\n      </p>\n    }\n  </div>\n)\n\nexport default StatusBar\n","import React from \"react\"\n\nimport \"./HiddenLetter.css\"\n\nconst DEFAULT_VALUE = \"_\"\n\nconst HiddenLetter = ({ value, reveal }) => (\n  <span className=\"hidden-letter\">\n    {reveal ? value : DEFAULT_VALUE}\n  </span>\n)\n\nexport default HiddenLetter\n","import React from \"react\"\n\nimport \"./HiddenWord.css\"\n\nimport HiddenLetter from \"./HiddenLetter\"\n\nconst HiddenWord = ({ reveal, lettersToGuess, selectedLetters }) => (\n  <div className=\"ui segment\">\n    {lettersToGuess.map((letter, index) => (\n      <HiddenLetter\n        key={index}\n        value={letter}\n        reveal={reveal || selectedLetters.includes(letter)}\n      />\n    ))}\n  </div>\n)\n\nexport default HiddenWord\n","import React from \"react\"\n\nimport \"./Letter.css\"\n\nconst DISABLED_CLASS = \"disabled\"\nconst SUCCESS_CLASS = \"positive\"\nconst FAIL_CLASS = \"negative\"\n\nfunction pickedClass(enabled, picked, status) {\n  if(!picked) {\n    return enabled ? \"\" : ` ${DISABLED_CLASS}`\n  }\n\n  return ` ${DISABLED_CLASS} ${status ? SUCCESS_CLASS : FAIL_CLASS}`\n}\n\nconst Letter = ({ value, enabled, picked, pickedStatus, onClick }) => (\n  <span className=\"letter\">\n    <button\n      className={`ui button${pickedClass(enabled, picked, pickedStatus)}`}\n      onClick={() => enabled && onClick(value)}\n    >\n      {value}\n    </button>\n  </span>\n)\n\nexport default Letter\n","import React from \"react\"\n\nimport \"./Keyboard.css\"\n\nimport Letter from \"./Letter\"\n\nconst LETTERS = [\n  \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\",\n  \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n]\n\nfunction pickedStatus(value, selected, matchingValues) {\n  if(selected.includes(value)) {\n    return matchingValues.includes(value)\n  }\n}\n\nconst Keyboard = ({ enabled, lettersToGuess, selectedLetters, handleLetterClick }) => {\n  return (\n    <div className=\"ui segment keyboard\">\n      {LETTERS.map((letterValue) => (\n        <Letter\n          key={letterValue}\n          value={letterValue}\n          enabled={enabled}\n          picked={selectedLetters.includes(letterValue)}\n          pickedStatus={pickedStatus(letterValue, selectedLetters, lettersToGuess)}\n          onClick={handleLetterClick}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default Keyboard\n","import React, { Component } from \"react\"\nimport faker from \"faker\"\n\nimport \"./App.css\"\n\nimport StatusBar from \"./StatusBar\"\nimport HiddenWord from \"./HiddenWord\"\nimport Keyboard from \"./Keyboard\"\n\nconst INITIAL_CHANCES = 6\nconst STATUS_PLAYING = \"playing\"\nconst STATUS_SUCCEEDED = \"succeeded\"\nconst STATUS_FAILED = \"failed\"\n\nfunction randomWord() {\n  return faker.hacker.noun().toUpperCase()\n}\n\nclass App extends Component {\n  state = {\n    lettersToGuess: randomWord().split(\"\"),\n    selectedLetters: [],\n    chances: INITIAL_CHANCES,\n    status: STATUS_PLAYING,\n  }\n\n  // Arrow fx for binding\n  handleLetterClick = (letter) => {\n    if(!this.state.selectedLetters.includes(letter)) {\n      this.setState(\n        (prevState, _props) => {\n          const newSelectedLetters = [...prevState.selectedLetters, letter]\n          const newState = { selectedLetters: newSelectedLetters }\n\n          if(this.state.lettersToGuess.every((letter) => newSelectedLetters.includes(letter))) {\n            newState[\"status\"] = STATUS_SUCCEEDED\n          }\n\n          if(this.wrongGuess(letter)) {\n            const newChances = prevState.chances - 1\n            newState[\"chances\"] = newChances\n\n            if(newChances === 0) {\n              newState[\"status\"] = STATUS_FAILED\n            }\n          }\n\n          return newState\n        }\n      )\n    }\n  }\n\n  // Arrow fx for binding\n  lauchNewGame = () => {\n    this.setState({\n      lettersToGuess: randomWord().split(\"\"),\n      selectedLetters: [],\n      chances: INITIAL_CHANCES,\n      status: STATUS_PLAYING\n    })\n  }\n\n  wrongGuess(letter) {\n    return !this.state.lettersToGuess.includes(letter)\n  }\n\n  render() {\n    const { lettersToGuess, status, chances, selectedLetters } = this.state\n\n    return (\n      <div className=\"App\">\n        <div className=\"ui container\">\n          <h1 className=\"ui header\">Hangman React</h1>\n          <StatusBar\n            gameStatus={status}\n            chances={chances}\n            lauchNewGame={this.lauchNewGame}\n          />\n          <HiddenWord\n            reveal={status !== STATUS_PLAYING}\n            lettersToGuess={lettersToGuess}\n            selectedLetters={selectedLetters}\n          />\n          <Keyboard\n            enabled={status === STATUS_PLAYING}\n            lettersToGuess={lettersToGuess}\n            selectedLetters={selectedLetters}\n            handleLetterClick={this.handleLetterClick}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}